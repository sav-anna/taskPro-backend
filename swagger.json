{
  "openapi": "3.0.3",
  "info": {
    "title": "TaskPro API docs",
    "description": "This is the documentation of the TaskPro API backend, which is developed for the TaskPro web application.\n\n_The TaskPro backend API is built on Node.js (version 12 or higher) using the Express.js, API and Mongoose to interact with the MongoDB database._",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://taskpro-m75b.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Board",
      "description": "Boards endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create user",
        "description": "Created new user object",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successful created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "User creation error"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User is logged in successful"
          },
          "400": {
            "description": "Loggin error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "parameters": [
          {
            "in": "header",
            "required": true,
            "name": "Authorization",
            "description": "Token of the current user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "The user is logged out"
          },
          "401": {
            "description": "Missing header with authorization token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get information about the current user",
        "parameters": [
          {
            "in": "header",
            "required": true,
            "name": "Authorization",
            "description": "The token issued to the current user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information found about user"
          },
          "401": {
            "description": "Missing header with authorization token"
          }
        }
      }
    },
    "/auth/{user}": {
      "put": {
        "tags": ["Auth"],
        "summary": "Update profile user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "Token of the current user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successful update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRegister": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "UserName"
          },
          "email": {
            "type": "string",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64ca36b5d2a58e01f84482ce"
          },
          "name": {
            "type": "string",
            "example": "UserName"
          },
          "email": {
            "type": "string",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "theme": {
            "type": "string",
            "example": "dark"
          },
          "avatar": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
