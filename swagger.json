{
  "openapi": "3.0.3",
  "info": {
    "title": "TaskPro API docs",
    "description": "This is the documentation of the TaskPro API backend, which is developed for the TaskPro web application.\n\nThe TaskPro backend API is built on Node.js (version 12 or higher) using the Express.js, API and Mongoose, Cloudinary to interact with the MongoDB database.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://taskpro-m75b.onrender.com/api"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Boards",
      "description": "Boards endpoints"
    },
    {
      "name": "Columns",
      "description": "Columns endpoints"
    },
    {
      "name": "Tasks",
      "description": "Tasks endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create user",
        "description": "Created new user object",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successful created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Email already in use"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User is logged in successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Email or password invalid"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs out current logged in user session",
        "description": "The current user must have a token",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout success"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get some information about the current user",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Update profile user (name or/and password or/and email or/and avatar)",
        "operationId": "getUserById",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "form-data",
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/": {
      "patch": {
        "tags": [
          "Auth"
        ],
        "summary": "Update TaskPro Web application theme",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Theme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Theme successful update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            }
          },
          "400": {
            "description": "Theme title is required"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/refreshToken": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "RefreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "RefreshToken of current user",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": {
                  "refreshToken": "eyJhbGciOiJIUzI1Ni..."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "accessToken": "eyJhbGciOiJIUzI1NiIsI...",
                    "refreshToken": "eyJhbGciOiJIUzI1NiIs..."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid token"
          },
          "401": {
            "description": "Refresh token expired"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/help": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Need help",
        "description": "Sending an email asking for help to technical support. Only authorized user can send",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Help"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Your mail successfully sent"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google authorization",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Successful (redirect to front-end with access Token)"
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/boards": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Get all boards",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "description": "The current user must have a token.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Boards"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Get one board by id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "description": "Id of the board",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoardById"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/": {
      "post": {
        "tags": [
          "Boards"
        ],
        "summary": "Add board",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "description": "The current user must have a token.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBoard"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}/": {
      "put": {
        "tags": [
          "Boards"
        ],
        "summary": "Update board",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "description": "Id of the board",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBoard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{_id}": {
      "delete": {
        "tags": [
          "Boards"
        ],
        "summary": "Delete board",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "Id of the board",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Board successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBoard"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/columns/": {
      "post": {
        "tags": [
          "Columns"
        ],
        "summary": "Add column",
        "description": "The current user must have a token.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddColumn"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnResponse"
                }
              }
            }
          },
          "400": {
            "description": "Column validation failed. Path parentBoard is required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/columns/{columnId}": {
      "get": {
        "tags": [
          "Columns"
        ],
        "summary": "Get column by id",
        "description": "The current user must have a token.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "columnId",
            "in": "path",
            "required": true,
            "description": "Id of the current column",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnResponseById"
                }
              }
            }
          },
          "400": {
            "description": "Column validation failed. Path parentBoard is required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/columns/{columnId}/": {
      "put": {
        "tags": [
          "Columns"
        ],
        "summary": "Update column",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "columnId",
            "in": "path",
            "required": true,
            "description": "Id of the column",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateColumn"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnResponseById"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Column not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/columns/{_id}": {
      "delete": {
        "tags": [
          "Columns"
        ],
        "summary": "Delete column",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "Id of the column",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Column successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnRemoveResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Column not found"
          }
        }
      }
    },
    "/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Add task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "description": "The current user must have a token.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTask"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get task by id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "Id of the task",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "The current user must have a token.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tasks/{taskId}/": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "Id of the task",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "The current user must have a token.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tasks/{_id}": {
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "Id of the task",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Column not found"
          }
        }
      }
    },
    "/tasks/{_id}/": {
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "Change the owner of the task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "Id of the current task",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "id of the column to which the task is moved",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "parentColumn": "64d13c39a01425f5d9c312ab",
                  "orderForCurrentColumn": [],
                  "orderForNewColumn": []
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task Order was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Help": {
        "type": "object",
        "required": [
          "email",
          "message"
        ],
        "properties": {
          "email": {
            "type": "string",
            "example": "user@email.com"
          },
          "message": {
            "type": "string",
            "example": "I need help with boards and tasks"
          }
        }
      },
      "UserRegister": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Username"
          },
          "email": {
            "type": "string",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345678"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Username"
          },
          "email": {
            "type": "string",
            "example": "user@email.com"
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345678"
          }
        }
      },
      "UserLoginResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "64ca36b5d2a58e01f84482ce"
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0Y2JkZGU2ZjA4NDViZDA2ZWMzNWIwNCIsImlhdCI6MTY5MTA4ODkxOSwiZXhwIjoxNjkxMTcxNzE5fQ."
          },
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ8.eyJpZCI6IjY0Y5JkZGU2ZjA4NDViZDA2ZWMzNWIwNCIsImlhdCI6MTY5MTA4ODkxOSwiZXhwIjoxNjkxMTcxNzE5fQ."
          },
          "theme": {
            "type": "string",
            "example": "Dark"
          },
          "avatar": {
            "type": "string",
            "description": "avatarURL"
          },
          "name": {
            "type": "string",
            "example": "Username"
          },
          "email": {
            "type": "string",
            "example": "user@email.com"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345678"
          },
          "avatarURL": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UserCurrentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Successfully updated"
          },
          "code": {
            "type": "string",
            "example": 200
          },
          "_id": {
            "type": "string",
            "example": "64cfbbf026d09de4371c56c7"
          },
          "name": {
            "type": "string",
            "example": "Username"
          },
          "email": {
            "type": "string",
            "example": "user@email.com"
          },
          "theme": {
            "type": "string",
            "example": "dark"
          },
          "avatarURL": {
            "type": "string",
            "example": "https://res.cloudinary.com/taskpro/image/upload/..."
          }
        }
      },
      "UserUpdateResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Successfully updated"
          },
          "code": {
            "type": "number",
            "example": 200
          },
          "_id": {
            "type": "string",
            "example": "64cfbbf026d09de4371c56c7"
          },
          "name": {
            "type": "string",
            "example": "Username"
          },
          "email": {
            "type": "string",
            "example": "user@email.com"
          },
          "theme": {
            "type": "string",
            "example": "dark"
          },
          "avatarURL": {
            "type": "string",
            "example": "https://res.cloudinary.com/taskpro/image/upload/..."
          }
        }
      },
      "Theme": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "example": "violet"
          }
        }
      },
      "Boards": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "field": {
              "type": "string"
            }
          }
        },
        "example": {
          "boards": [
            {
              "_id": "111a1ea1113bc1ba1a1c896c",
              "title": "New Board",
              "icon": "star",
              "background": "0",
              "columnOrder": [],
              "owner": "64d3a58f9f0a3cc81960deac"
            },
            {
              "_id": "222a0ea22b2bc2ba2c2d899c",
              "title": "Work Board",
              "icon": "project",
              "background": "1",
              "columnOrder": [],
              "owner": "64d3a58f9f0a3cc81960deac"
            }
          ]
        }
      },
      "GetBoardById": {
        "type": "object",
        "example": {
          "boards": {
            "_id": "111a1ea1113bc1ba1a1c896c",
            "title": "New Board",
            "icon": "star",
            "background": "1",
            "columnOrder": [],
            "owner": "64d3a58f9f0a3cc81960deac"
          },
          "columns": []
        }
      },
      "AddBoard": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "example": "star"
          },
          "background": {
            "type": "string",
            "example": 1
          }
        }
      },
      "BoardResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "example": "star"
          },
          "background": {
            "type": "string",
            "example": 0
          },
          "columnOrder": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64cff474d333457be0a3fa98"
                }
              }
            }
          },
          "owner": {
            "type": "string",
            "example": "64cfc2efca5e9b96cc4b3420"
          },
          "_id": {
            "type": "string",
            "example": "64cff474d317457be0a3fa94"
          }
        }
      },
      "UpdateBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64cff474d317457be0a3fa94"
          },
          "title": {
            "type": "string",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "example": "star"
          },
          "background": {
            "type": "string",
            "example": 1
          },
          "columnOrder": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "string",
            "example": "64d3a58f9f0a3cc81960deac"
          }
        }
      },
      "DeleteBoard": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "example": {
              "_id": "111a1ea1113bc1ba1a1c896c",
              "title": "New Board",
              "icon": "star",
              "background": "0",
              "columnOrder": [],
              "owner": "64d3a58f9f0a3cc81960deac"
            }
          }
        }
      },
      "AddColumn": {
        "type": "object",
        "required": [
          "parentBoard"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "New Column"
          },
          "parentBoard": {
            "type": "object",
            "example": "boardId"
          }
        }
      },
      "ColumnResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "New Column"
          },
          "parentBoard": {
            "type": "string",
            "example": "64cff474d317457be0a3fa94"
          },
          "taskOrder": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "64cfc2efca899b99cc4b3000"
            }
          },
          "_id": {
            "type": "string",
            "example": "64d13c39a01425f5d9c312ab"
          }
        }
      },
      "ColumnResponseById": {
        "type": "object",
        "properties": {
          "column": {
            "properties": {
              "_id": {
                "type": "string",
                "example": "64d13c39a01425f5d9c312ab"
              },
              "title": {
                "type": "string",
                "example": "New Column"
              },
              "parentBoard": {
                "type": "string",
                "example": "64cff474d317457be0a3fa94"
              },
              "taskOrder": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "64cfc2efca899b99cc4b3000"
                }
              }
            }
          }
        }
      },
      "UpdateColumn": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Work column"
          }
        }
      },
      "ColumnRemoveResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64d13c39a01425f5d9c312ab"
          },
          "title": {
            "type": "string",
            "example": "New Column"
          },
          "parentBoard": {
            "type": "string",
            "example": "64cff474d317457be0a3fa94"
          },
          "taskOrder": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "64cfc2efca899b99cc4b3000"
            }
          }
        }
      },
      "AddTask": {
        "type": "object",
        "required": [
          "title",
          "parentColumn"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "New Task"
          },
          "description": {
            "type": "string",
            "example": ""
          },
          "priority": {
            "type": "string",
            "example": "without"
          },
          "deadline": {
            "type": "string",
            "example": null
          },
          "parentColumn": {
            "type": "string",
            "example": "64d13c39a01425f5d9c312ab"
          }
        }
      },
      "UpdateTask": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "New Task"
          },
          "description": {
            "type": "string",
            "example": ""
          },
          "priority": {
            "type": "string",
            "example": "without"
          },
          "deadline": {
            "type": "string",
            "example": null
          }
        }
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64d14760a01425f5d9c3135d"
          },
          "title": {
            "type": "string",
            "example": "New Task"
          },
          "description": {
            "type": "string",
            "example": ""
          },
          "priority": {
            "type": "string",
            "example": "without"
          },
          "deadline": {
            "type": "string",
            "example": null
          },
          "parentColumn": {
            "type": "string",
            "example": "64d13c39a01425f5d9c312ab"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}